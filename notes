;; -*- mode: outline; outline-regexp: " *[-\+]"; indent-tabs-mode: nil; fill-column: 120 -*-

^c^d hide subtree
^c^s show subtree

Strict Dump Performance
JSON::Ext.dump 20000 times in 0.173 seconds or 115493.546 dump/sec.
Oj:strict.dump 20000 times in 0.050 seconds or 401475.753 dump/sec.

Summary:
   System  time (secs)  rate (ops/sec)
   ---------  -----------  --------------
   Oj:strict       0.050      401475.753
   JSON::Ext       0.173      115493.546

Comparison Matrix
(performance factor, 2.0 means row is twice as fast as column)
           Oj:strict  JSON::Ext
           ---------  ---------  ---------
           Oj:strict       1.00       3.48
           JSON::Ext       0.29       1.00
           
- json gem bugs
 - max nesting
  When JSON.dump is called then an ArgumentError is expected and the
  limit is the depth inclusive. If JSON.generate is called then a
  NestingError is expected and the limit is inclusive. there are unit tests for both cases.
  
- refactor
 - what happened to obj mode loading time?

 - plan
  - rails mode

  - custom mode
  - cleanup dump.c
  
  - reorg tests
   - isolated rails stuff
    - only need to verify JSON methods have beed defined and not overridden
    - really a mimic tests
    - can rails tests not be run for 1.9.3?


  - create dump_custom, copy from compat

  - have rails use compat funcs
  
 - add rails mode
 - add use_to_hash option
 - custom mode for using all the options

 - hook up circular for strict and compat but without adding the id
 
  

- rail compat
 - fix struct
 - consider
  - detecting active classes (how expensive is it) and calling as_json
  - something like odd but with a faster lookup that has specially build active dumpers

 + Regexp
 + StringSpecial
  - new friendly mode for XSS and hibit - hixss
 + Struct
 + Rational
 + Enumerable

 - add circular check for compat and just stop on compat and don't follow

 - Process::Status
 - ActiveSupport::TimeWithZone
 - ActiveModel::Errors
 - ActiveSupport::Multibyte::Chars
 - ActiveRecord::Relation

 - make regexp an odd

 - how about a const for rails options (separate from mimic or maybe the same set)
  - or a function to set options to rails

- debug
 - instrument for parsing floats/bigdecimal
  - branch

 - option to allow invalid unicode through
 - unit tests for 32 bit - test_float_parse
  - look at RUBY_PLATFORM maybe?
 - look at env var for OJ_DEBUG when doing ruby extconf.rb
 - add printf for keys spots in parse and dump
 
- invalid character option
 - don't check options
  - replace with best attempt such as \ud83d => \xED\xA0\xBD
  - that would be the normal replacement
 - allow_invalid_unicode

- streaming parser for scp and saj

---------------------------
Tried a separate thread for the parser and the results were poor. The parsing is
10% to 15% of the total so splitting ruby calls and c does not help much and the
overhead of swapping data was too high. It was not possible to split ruby calls
into both threads due to not getting a lock on the ruby environment for object
creation.
