;; -*- mode: outline; outline-regexp: " *[-\+]"; indent-tabs-mode: nil; fill-column: 120 -*-

^c^d hide subtree
^c^s show subtree

- parser
 - saj
 - usual
  - test all primitive types
  - create collection stack (index into vstack, index to key stack (negative indicates arrary)

  - options
   - symbol_keys
   - class create option (create_id)
   - class_cache
   - omit_null - skip null hash and object members
   - bigdecimal_load* [_:bigdecimal_|_:float_|_:auto_|_:fast_]
   - hash_class
   - array_class
   - detect_time
  - design

  - stack of VALUEs
  - stack of indices pointing to last collection
  - on close, use stack for settind array in batch
   - for has put keys on stack too
    - what happens when switching to an object?
     - maybe object uses ID for setting
     - sym does go to id or str(value)
    - maybe parallel set of keys as string (could resuse or cache and reuse allocated string)
    -


 - rails
 - object?

- new parser reasons
 - parser itself is faster dues to reduced branching
 - bulk array create - 15x
 - bulk hash - 3x
 - reuse of memory
 - better control over options

 - modes
  - strict and compat can be the same - standard/regular/common/usual
   - stardard and common as aliases
  - object is different

 - strict
  - grow stack with market for start of hash or array (for object mode flag for hash or object)
  - double stacks?
   - one for values and one for hash/array start mark

- more efficient array and hash creation
  - void rb_hash_bulk_insert(long, const VALUE *, VALUE);
  - rb_hash_bulk_insert_into_st_table(long argc, const VALUE *argv, VALUE hash)
  - VALUE rb_ary_new_from_values(long n, const VALUE *elts);
  - or VALUE rb_ary_new_from_args(long n, ...);

- add default_options[]= method
- freeze cached strings

- big decimal
 - just in custom mode, maybe in strict?

 - encode_big_decimal_as_string
  - add as fix for rails change

- rails

 - Process::Status
 - ActiveSupport::TimeWithZone
 - ActiveModel::Errors
 - ActiveSupport::Multibyte::Chars
 - ActiveRecord::Relation

- debug
 - instrument for parsing floats/bigdecimal
  - branch

 - option to allow invalid unicode through
 - unit tests for 32 bit - test_float_parse
  - look at RUBY_PLATFORM maybe?
 - look at env var for OJ_DEBUG when doing ruby extconf.rb
 - add printf for keys spots in parse and dump

- invalid character option
 - don't check options
  - replace with best attempt such as \ud83d => \xED\xA0\xBD
  - that would be the normal replacement
 - allow_invalid_unicode

- streaming parser for scp and saj

---------------------------
Tried a separate thread for the parser and the results were poor. The parsing is
10% to 15% of the total so splitting ruby calls and c does not help much and the
overhead of swapping data was too high. It was not possible to split ruby calls
into both threads due to not getting a lock on the ruby environment for object
creation.

----------------
todo
- #570 - complain in strict mode about leading + or trailing .
- #569 - < and > are not escaped in compat mode
 - ruby -r oj -e 'puts "#{Oj::VERSION} -> #{Oj.dump("<", {mode: :compat, escape_mode: :unicode_xss})}"'
    3.7.5 -> "<"
    3.7.4 -> "\u003c"
- #568 - We're still at Rails 4.2 so maybe all of this is outdated, but still.
It's documented that :bigdecimal_as_decimal isn't available for mode: :rails. However, if I run it like this:

Oj.optimize_rails
Oj.default_options = { mode: :rails, bigdecimal_as_decimal: true }

It does the job - Oj dumps BigDecimal as number.
If I later add bigdecimal_as_decimal: true explicitely in the dump it works for single number dump, but not for Hash.

Oj.dump(BigDecimal('1.2')) # => "1.2"
Oj.dump({a: BigDecimal('1.2')}) # => "{\"a\":1.2}"
Oj.dump(BigDecimal('1.2'), bigdecimal_as_decimal: true) # => "1.2"
Oj.dump({a: BigDecimal('1.2')}, bigdecimal_as_decimal: true) # => "{\"a\":\"1.2\"}" - unexpected

Also when I remove running Oj.optimize_rails, Oj ignores bigdecimal_as_decimal and dumps BigDecimal as string.

Currently, it works OK for me, just wanted to check what's the expected behavior and if it should be aware when upgrading Rails or Oj.

- #567 - irb(main):001:0> Oj.dump(Time.utc(2000, 1, 1, 1, 0, 0, 0), mode: :compat)
    => "\"2000-01-01 01:00:00 UTC\""
  - missing fractional part in custom with second_precision id 0 fraction
